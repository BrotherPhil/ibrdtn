/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_swigJNI = NULL;
    jmethodID director_methids[3];
  }
}

#include <string>


#include "../ibrdtn/ibrdtn/data/EID.h"
#include "../ibrdtn/ibrdtn/data/PrimaryBlock.h"

#include "../ibrdtn/ibrdtn/data/SDNV.h"

#include "../ibrdtn/ibrdtn/data/DTNTime.h"


#include "../ibrdtn/ibrdtn/data/BundleID.h"

#include "../ibrdtn/ibrdtn/data/AdministrativeBlock.h"
#include "../ibrdtn/ibrdtn/data/StatusReportBlock.h"
#include "../ibrdtn/ibrdtn/data/CustodySignalBlock.h"

#include "../dtnd/src/api/NativeSession.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "SWIGWrapper.h"

SwigDirector_NativeSessionCallback::SwigDirector_NativeSessionCallback(JNIEnv *jenv) : dtn::api::NativeSessionCallback(), Swig::Director(jenv) {
}

SwigDirector_NativeSessionCallback::~SwigDirector_NativeSessionCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_NativeSessionCallback::notifyBundle(dtn::data::BundleID const &id) throw() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jid = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method dtn::api::NativeSessionCallback::notifyBundle.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(dtn::data::BundleID **)&jid = (dtn::data::BundleID *) &id; 
    jenv->CallStaticVoidMethod(Swig::jclass_swigJNI, Swig::director_methids[0], swigjobj, jid);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NativeSessionCallback::notifyStatusReport(dtn::data::StatusReportBlock const &report) throw() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jreport = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method dtn::api::NativeSessionCallback::notifyStatusReport.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(dtn::data::StatusReportBlock **)&jreport = (dtn::data::StatusReportBlock *) &report; 
    jenv->CallStaticVoidMethod(Swig::jclass_swigJNI, Swig::director_methids[1], swigjobj, jreport);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NativeSessionCallback::notifyCustodySignal(dtn::data::CustodySignalBlock const &custody) throw() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcustody = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method dtn::api::NativeSessionCallback::notifyCustodySignal.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(dtn::data::CustodySignalBlock **)&jcustody = (dtn::data::CustodySignalBlock *) &custody; 
    jenv->CallStaticVoidMethod(Swig::jclass_swigJNI, Swig::director_methids[2], swigjobj, jcustody);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NativeSessionCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "notifyBundle", "(Lde/tubs/ibr/dtn/swig/BundleID;)V", NULL 
    },
    {
      "notifyStatusReport", "(Lde/tubs/ibr/dtn/swig/StatusReportBlock;)V", NULL 
    },
    {
      "notifyCustodySignal", "(Lde/tubs/ibr/dtn/swig/CustodySignalBlock;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("de/tubs/ibr/dtn/swig/NativeSessionCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1DEFAULT_1SCHEME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &dtn::data::EID::DEFAULT_SCHEME;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1CBHE_1SCHEME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &dtn::data::EID::CBHE_SCHEME;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1EID_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::EID *)new dtn::data::EID();
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1EID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (dtn::data::EID *)new dtn::data::EID(arg1,arg2);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1EID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (dtn::data::EID *)new dtn::data::EID(arg1);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1EID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (dtn::data::EID *)new dtn::data::EID(arg1,arg2);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1EID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::EID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1sameHost_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((dtn::data::EID const *)arg1)->sameHost((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1sameHost_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  dtn::data::EID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::EID const & reference is null");
    return 0;
  } 
  result = (bool)((dtn::data::EID const *)arg1)->sameHost((dtn::data::EID const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = ((dtn::data::EID const *)arg1)->getString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getApplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  try {
    result = ((dtn::data::EID const *)arg1)->getApplication();
  }
  catch(ibrcommon::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ibrcommon::Exception exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  try {
    result = ((dtn::data::EID const *)arg1)->getHost();
  }
  catch(ibrcommon::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ibrcommon::Exception exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getScheme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = ((dtn::data::EID const *)arg1)->getScheme();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getSSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = ((dtn::data::EID const *)arg1)->getSSP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getDelimiter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = ((dtn::data::EID const *)arg1)->getDelimiter();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  dtn::data::EID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  try {
    result = ((dtn::data::EID const *)arg1)->getNode();
  }
  catch(ibrcommon::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ibrcommon::Exception exception thrown");
    return 0; 
  }
  
  *(dtn::data::EID **)&jresult = new dtn::data::EID((const dtn::data::EID &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1hasApplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = (bool)((dtn::data::EID const *)arg1)->hasApplication();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1isCompressable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = (bool)((dtn::data::EID const *)arg1)->isCompressable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1isNone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = (bool)((dtn::data::EID const *)arg1)->isNone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_EID_1getCompressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::EID *arg1 = (dtn::data::EID *) 0 ;
  std::pair< size_t,size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::EID **)&jarg1; 
  result = ((dtn::data::EID const *)arg1)->getCompressed();
  *(std::pair< size_t,size_t > **)&jresult = new std::pair< size_t,size_t >((const std::pair< size_t,size_t > &)result); 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BUNDLE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char)(unsigned char)dtn::data::BUNDLE_VERSION;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1PRIO_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::PRIORITY result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::PRIORITY)dtn::data::PrimaryBlock::PRIO_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1PRIO_1MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::PRIORITY result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::PRIORITY)dtn::data::PrimaryBlock::PRIO_MEDIUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1PRIO_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::PRIORITY result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::PRIORITY)dtn::data::PrimaryBlock::PRIO_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1FRAGMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::FRAGMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1APPDATA_1IS_1ADMRECORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::APPDATA_IS_ADMRECORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DONT_1FRAGMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DONT_FRAGMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CUSTODY_1REQUESTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CUSTODY_REQUESTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DESTINATION_1IS_1SINGLETON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DESTINATION_IS_SINGLETON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1ACKOFAPP_1REQUESTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::ACKOFAPP_REQUESTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1RESERVED_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::RESERVED_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1PRIORITY_1BIT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::PRIORITY_BIT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1PRIORITY_1BIT2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::PRIORITY_BIT2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CLASSOFSERVICE_19_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CLASSOFSERVICE_9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CLASSOFSERVICE_110_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CLASSOFSERVICE_10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CLASSOFSERVICE_111_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CLASSOFSERVICE_11;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CLASSOFSERVICE_112_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CLASSOFSERVICE_12;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1CLASSOFSERVICE_113_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::CLASSOFSERVICE_13;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1REQUEST_1REPORT_1OF_1BUNDLE_1RECEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::REQUEST_REPORT_OF_BUNDLE_RECEPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1REQUEST_1REPORT_1OF_1CUSTODY_1ACCEPTANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::REQUEST_REPORT_OF_CUSTODY_ACCEPTANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1REQUEST_1REPORT_1OF_1BUNDLE_1FORWARDING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::REQUEST_REPORT_OF_BUNDLE_FORWARDING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1REQUEST_1REPORT_1OF_1BUNDLE_1DELIVERY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::REQUEST_REPORT_OF_BUNDLE_DELIVERY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1REQUEST_1REPORT_1OF_1BUNDLE_1DELETION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::REQUEST_REPORT_OF_BUNDLE_DELETION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1STATUS_1REPORT_1REQUEST_119_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::STATUS_REPORT_REQUEST_19;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1STATUS_1REPORT_1REQUEST_120_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::STATUS_REPORT_REQUEST_20;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DTNSEC_1REQUEST_1SIGN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DTNSEC_REQUEST_SIGN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DTNSEC_1REQUEST_1ENCRYPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DTNSEC_REQUEST_ENCRYPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DTNSEC_1STATUS_1VERIFIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DTNSEC_STATUS_VERIFIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DTNSEC_1STATUS_1CONFIDENTIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DTNSEC_STATUS_CONFIDENTIAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1DTNSEC_1STATUS_1AUTHENTICATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::DTNSEC_STATUS_AUTHENTICATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1IBRDTN_1REQUEST_1COMPRESSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock::FLAGS result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock::FLAGS)dtn::data::PrimaryBlock::IBRDTN_REQUEST_COMPRESSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1PrimaryBlock(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::PrimaryBlock *)new dtn::data::PrimaryBlock();
  *(dtn::data::PrimaryBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1PrimaryBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1isExpired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (bool)((dtn::data::PrimaryBlock const *)arg1)->isExpired();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = ((dtn::data::PrimaryBlock const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::PrimaryBlock::FLAGS arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (dtn::data::PrimaryBlock::FLAGS)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::PrimaryBlock::FLAGS arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (dtn::data::PrimaryBlock::FLAGS)jarg2; 
  result = (bool)((dtn::data::PrimaryBlock const *)arg1)->get(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::PrimaryBlock::PRIORITY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (dtn::data::PrimaryBlock::PRIORITY)((dtn::data::PrimaryBlock const *)arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::PrimaryBlock::PRIORITY arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (dtn::data::PrimaryBlock::PRIORITY)jarg2; 
  (arg1)->setPriority(arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1relabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  (arg1)->relabel();
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1procflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_procflags = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1procflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_procflags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_timestamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_timestamp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1sequencenumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_sequencenumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1sequencenumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_sequencenumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1lifetime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_lifetime = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1lifetime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_lifetime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1fragmentoffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_fragmentoffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1fragmentoffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_fragmentoffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1appdatalength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->_appdatalength = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1appdatalength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result =  ((arg1)->_appdatalength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_source = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_source);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1destination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_destination = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1destination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_destination);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1reportto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_reportto = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1reportto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_reportto);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1custodian_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_custodian = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_PrimaryBlock_1_1custodian_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::PrimaryBlock *arg1 = (dtn::data::PrimaryBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::PrimaryBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_custodian);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1MAX_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = dtn::data::SDNV::MAX_LENGTH;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1SDNV_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  uint64_t const *argp1 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint64_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t const");
    return 0;
  }
  arg1 = *argp1; 
  result = (dtn::data::SDNV *)new dtn::data::SDNV(arg1);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1SDNV_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::SDNV *)new dtn::data::SDNV();
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1SDNV(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::SDNV *arg1 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::SDNV **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1getLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::SDNV *arg1 = (dtn::data::SDNV *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::SDNV **)&jarg1; 
  result = ((dtn::data::SDNV const *)arg1)->getLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1getLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint64_t *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint64_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint64_t const & reference is null");
    return 0;
  } 
  result = dtn::data::SDNV::getLength((uint64_t const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1getLength_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  result = dtn::data::SDNV::getLength((unsigned char const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::SDNV *arg1 = (dtn::data::SDNV *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::SDNV **)&jarg1; 
  result = ((dtn::data::SDNV const *)arg1)->getValue();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtn::data::SDNV *arg1 = (dtn::data::SDNV *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::SDNV **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (arg1)->decode((char const *)arg2,arg3);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_SDNV_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtn::data::SDNV *arg1 = (dtn::data::SDNV *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::SDNV **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = ((dtn::data::SDNV const *)arg1)->encode(arg2,arg3);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1DTNTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::DTNTime *)new dtn::data::DTNTime();
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1DTNTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (dtn::data::DTNTime *)new dtn::data::DTNTime(arg1,arg2);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1DTNTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (dtn::data::DTNTime *)new dtn::data::DTNTime(arg1);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1DTNTime_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dtn::data::SDNV arg1 ;
  dtn::data::SDNV arg2 ;
  dtn::data::SDNV *argp1 ;
  dtn::data::SDNV *argp2 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dtn::data::SDNV **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::SDNV");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(dtn::data::SDNV **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::SDNV");
    return 0;
  }
  arg2 = *argp2; 
  result = (dtn::data::DTNTime *)new dtn::data::DTNTime(arg1,arg2);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1DTNTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::DTNTime *arg1 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::DTNTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_DTNTime_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::DTNTime *arg1 = (dtn::data::DTNTime *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::DTNTime **)&jarg1; 
  result = (dtn::data::SDNV *) &((dtn::data::DTNTime const *)arg1)->getTimestamp();
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_DTNTime_1getNanoseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::DTNTime *arg1 = (dtn::data::DTNTime *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::DTNTime **)&jarg1; 
  result = (dtn::data::SDNV *) &((dtn::data::DTNTime const *)arg1)->getNanoseconds();
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_DTNTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dtn::data::DTNTime *arg1 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::DTNTime **)&jarg1; 
  (arg1)->set();
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_DTNTime_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::DTNTime *arg1 = (dtn::data::DTNTime *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::DTNTime **)&jarg1; 
  result = ((dtn::data::DTNTime const *)arg1)->getLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  dtn::data::EID arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  size_t arg5 ;
  dtn::data::EID const *argp1 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(dtn::data::EID **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::EID const");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (size_t)jarg5; 
  result = (dtn::data::BundleID *)new dtn::data::BundleID(arg1,arg2,arg3,arg4,arg5);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  dtn::data::EID arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  dtn::data::EID const *argp1 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(dtn::data::EID **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::EID const");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (dtn::data::BundleID *)new dtn::data::BundleID(arg1,arg2,arg3,arg4);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dtn::data::EID arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  dtn::data::EID const *argp1 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(dtn::data::EID **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::EID const");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (dtn::data::BundleID *)new dtn::data::BundleID(arg1,arg2,arg3);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dtn::data::EID arg1 ;
  size_t arg2 ;
  dtn::data::EID const *argp1 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(dtn::data::EID **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::EID const");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (size_t)jarg2; 
  result = (dtn::data::BundleID *)new dtn::data::BundleID(arg1,arg2);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::EID arg1 ;
  dtn::data::EID const *argp1 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(dtn::data::EID **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dtn::data::EID const");
    return 0;
  }
  arg1 = *argp1; 
  result = (dtn::data::BundleID *)new dtn::data::BundleID(arg1);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::BundleID *)new dtn::data::BundleID();
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleID_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  dtn::data::Bundle *arg1 = 0 ;
  dtn::data::BundleID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::Bundle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::Bundle const & reference is null");
    return 0;
  } 
  result = (dtn::data::BundleID *)new dtn::data::BundleID((dtn::data::Bundle const &)*arg1);
  *(dtn::data::BundleID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1BundleID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result = ((dtn::data::BundleID const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->source = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->source);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result =  ((arg1)->timestamp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1sequencenumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->sequencenumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1sequencenumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result =  ((arg1)->sequencenumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1fragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fragment = arg2;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1fragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result = (bool) ((arg1)->fragment);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_BundleID_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::BundleID *arg1 = (dtn::data::BundleID *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::BundleID **)&jarg1; 
  result =  ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1AdministrativeBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_AdministrativeBlock_1refsFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  result = (bool)((dtn::data::AdministrativeBlock const *)arg1)->refsFragment();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_AdministrativeBlock_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock const & reference is null");
    return ;
  } 
  try {
    (arg1)->read((dtn::data::PayloadBlock const &)*arg2);
  }
  catch(dtn::data::AdministrativeBlock::WrongRecordException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::data::AdministrativeBlock::WrongRecordException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_AdministrativeBlock_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock & reference is null");
    return ;
  } 
  ((dtn::data::AdministrativeBlock const *)arg1)->write(*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_AdministrativeBlock_1_1admfield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->_admfield = arg2;
}


SWIGEXPORT jchar JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_AdministrativeBlock_1_1admfield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  dtn::data::AdministrativeBlock *arg1 = (dtn::data::AdministrativeBlock *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::AdministrativeBlock **)&jarg1; 
  result = (char) ((arg1)->_admfield);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1RECEIPT_1OF_1BUNDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::TYPE)dtn::data::StatusReportBlock::RECEIPT_OF_BUNDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1CUSTODY_1ACCEPTANCE_1OF_1BUNDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::TYPE)dtn::data::StatusReportBlock::CUSTODY_ACCEPTANCE_OF_BUNDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1FORWARDING_1OF_1BUNDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::TYPE)dtn::data::StatusReportBlock::FORWARDING_OF_BUNDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1DELIVERY_1OF_1BUNDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::TYPE)dtn::data::StatusReportBlock::DELIVERY_OF_BUNDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1DELETION_1OF_1BUNDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::TYPE)dtn::data::StatusReportBlock::DELETION_OF_BUNDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1NO_1ADDITIONAL_1INFORMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::NO_ADDITIONAL_INFORMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1LIFETIME_1EXPIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::LIFETIME_EXPIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1FORWARDED_1OVER_1UNIDIRECTIONAL_1LINK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::FORWARDED_OVER_UNIDIRECTIONAL_LINK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1TRANSMISSION_1CANCELED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::TRANSMISSION_CANCELED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1DEPLETED_1STORAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::DEPLETED_STORAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1DESTINATION_1ENDPOINT_1ID_1UNINTELLIGIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::DESTINATION_ENDPOINT_ID_UNINTELLIGIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1NO_1KNOWN_1ROUTE_1TO_1DESTINATION_1FROM_1HERE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::NO_KNOWN_ROUTE_TO_DESTINATION_FROM_HERE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1NO_1TIMELY_1CONTACT_1WITH_1NEXT_1NODE_1ON_1ROUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::NO_TIMELY_CONTACT_WITH_NEXT_NODE_ON_ROUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1BLOCK_1UNINTELLIGIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::StatusReportBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock::REASON_CODE)dtn::data::StatusReportBlock::BLOCK_UNINTELLIGIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1StatusReportBlock(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::StatusReportBlock *)new dtn::data::StatusReportBlock();
  *(dtn::data::StatusReportBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1StatusReportBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock const & reference is null");
    return ;
  } 
  try {
    (arg1)->read((dtn::data::PayloadBlock const &)*arg2);
  }
  catch(dtn::data::AdministrativeBlock::WrongRecordException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::data::AdministrativeBlock::WrongRecordException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock & reference is null");
    return ;
  } 
  ((dtn::data::StatusReportBlock const *)arg1)->write(*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->_status = arg2;
}


SWIGEXPORT jchar JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (char) ((arg1)->_status);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1reasoncode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->_reasoncode = arg2;
}


SWIGEXPORT jchar JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1reasoncode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (char) ((arg1)->_reasoncode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1fragment_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_fragment_offset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1fragment_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_fragment_offset);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1fragment_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_fragment_length = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1fragment_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_fragment_length);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1receipt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeof_receipt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1receipt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeof_receipt);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1custodyaccept_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeof_custodyaccept = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1custodyaccept_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeof_custodyaccept);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1forwarding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeof_forwarding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1forwarding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeof_forwarding);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1delivery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeof_delivery = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1delivery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeof_delivery);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1deletion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeof_deletion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1timeof_1deletion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeof_deletion);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1bundle_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_bundle_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1bundle_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_bundle_timestamp);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1bundle_1sequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_bundle_sequence = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1bundle_1sequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_bundle_sequence);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_source = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::StatusReportBlock *arg1 = (dtn::data::StatusReportBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::StatusReportBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_source);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1NO_1ADDITIONAL_1INFORMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::NO_ADDITIONAL_INFORMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1RESERVED_101_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::RESERVED_01;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1RESERVED_102_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::RESERVED_02;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1REDUNDANT_1RECEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::REDUNDANT_RECEPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1DEPLETED_1STORAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::DEPLETED_STORAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1DESTINATION_1ENDPOINT_1ID_1UNINTELLIGIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::DESTINATION_ENDPOINT_ID_UNINTELLIGIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1NO_1KNOWN_1ROUTE_1TO_1DESTINATION_1FROM_1HERE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::NO_KNOWN_ROUTE_TO_DESTINATION_FROM_HERE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1NO_1TIMELY_1CONTACT_1WITH_1NEXT_1NODE_1ON_1ROUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::NO_TIMELY_CONTACT_WITH_NEXT_NODE_ON_ROUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1BLOCK_1UNINTELLIGIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock::REASON_CODE)dtn::data::CustodySignalBlock::BLOCK_UNINTELLIGIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1CustodySignalBlock(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::data::CustodySignalBlock *)new dtn::data::CustodySignalBlock();
  *(dtn::data::CustodySignalBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1CustodySignalBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1setMatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::MetaBundle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::MetaBundle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::MetaBundle const & reference is null");
    return ;
  } 
  (arg1)->setMatch((dtn::data::MetaBundle const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1setMatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::Bundle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::Bundle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::Bundle const & reference is null");
    return ;
  } 
  (arg1)->setMatch((dtn::data::Bundle const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::Bundle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::Bundle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::Bundle const & reference is null");
    return 0;
  } 
  result = (bool)((dtn::data::CustodySignalBlock const *)arg1)->match((dtn::data::Bundle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock const & reference is null");
    return ;
  } 
  try {
    (arg1)->read((dtn::data::PayloadBlock const &)*arg2);
  }
  catch(dtn::data::AdministrativeBlock::WrongRecordException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::data::AdministrativeBlock::WrongRecordException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::PayloadBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::PayloadBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PayloadBlock & reference is null");
    return ;
  } 
  ((dtn::data::CustodySignalBlock const *)arg1)->write(*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1custody_1accepted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_custody_accepted = arg2;
}


SWIGEXPORT jboolean JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1custody_1accepted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (bool) ((arg1)->_custody_accepted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = (dtn::data::CustodySignalBlock::REASON_CODE)jarg2; 
  if (arg1) (arg1)->_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::CustodySignalBlock::REASON_CODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::CustodySignalBlock::REASON_CODE) ((arg1)->_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1fragment_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_fragment_offset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1fragment_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_fragment_offset);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1fragment_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_fragment_length = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1fragment_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_fragment_length);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1timeofsignal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::DTNTime *arg2 = (dtn::data::DTNTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::DTNTime **)&jarg2; 
  if (arg1) (arg1)->_timeofsignal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1timeofsignal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::DTNTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::DTNTime *)& ((arg1)->_timeofsignal);
  *(dtn::data::DTNTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1bundle_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_bundle_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1bundle_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_bundle_timestamp);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1bundle_1sequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *arg2 = (dtn::data::SDNV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::SDNV **)&jarg2; 
  if (arg1) (arg1)->_bundle_sequence = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1bundle_1sequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::SDNV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::SDNV *)& ((arg1)->_bundle_sequence);
  *(dtn::data::SDNV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::EID *arg2 = (dtn::data::EID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2; 
  if (arg1) (arg1)->_source = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::data::CustodySignalBlock *arg1 = (dtn::data::CustodySignalBlock *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::data::CustodySignalBlock **)&jarg1; 
  result = (dtn::data::EID *)& ((arg1)->_source);
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1NativeSessionException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dtn::api::NativeSessionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (dtn::api::NativeSessionException *)new dtn::api::NativeSessionException(arg1);
  *(dtn::api::NativeSessionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1NativeSessionException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::api::NativeSessionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::api::NativeSessionException *)new dtn::api::NativeSessionException();
  *(dtn::api::NativeSessionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1NativeSessionException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::api::NativeSessionException *arg1 = (dtn::api::NativeSessionException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::api::NativeSessionException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleNotFoundException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dtn::api::BundleNotFoundException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (dtn::api::BundleNotFoundException *)new dtn::api::BundleNotFoundException(arg1);
  *(dtn::api::BundleNotFoundException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1BundleNotFoundException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::api::BundleNotFoundException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::api::BundleNotFoundException *)new dtn::api::BundleNotFoundException();
  *(dtn::api::BundleNotFoundException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1BundleNotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::api::BundleNotFoundException *arg1 = (dtn::api::BundleNotFoundException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::api::BundleNotFoundException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1NativeSessionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::api::NativeSessionCallback *arg1 = (dtn::api::NativeSessionCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::api::NativeSessionCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSessionCallback_1notifyBundle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSessionCallback *arg1 = (dtn::api::NativeSessionCallback *) 0 ;
  dtn::data::BundleID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSessionCallback **)&jarg1; 
  arg2 = *(dtn::data::BundleID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::BundleID const & reference is null");
    return ;
  } 
  (arg1)->notifyBundle((dtn::data::BundleID const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSessionCallback_1notifyStatusReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSessionCallback *arg1 = (dtn::api::NativeSessionCallback *) 0 ;
  dtn::data::StatusReportBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSessionCallback **)&jarg1; 
  arg2 = *(dtn::data::StatusReportBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::StatusReportBlock const & reference is null");
    return ;
  } 
  (arg1)->notifyStatusReport((dtn::data::StatusReportBlock const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSessionCallback_1notifyCustodySignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSessionCallback *arg1 = (dtn::api::NativeSessionCallback *) 0 ;
  dtn::data::CustodySignalBlock *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSessionCallback **)&jarg1; 
  arg2 = *(dtn::data::CustodySignalBlock **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::CustodySignalBlock const & reference is null");
    return ;
  } 
  (arg1)->notifyCustodySignal((dtn::data::CustodySignalBlock const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1NativeSessionCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dtn::api::NativeSessionCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::api::NativeSessionCallback *)new SwigDirector_NativeSessionCallback(jenv);
  *(dtn::api::NativeSessionCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSessionCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  dtn::api::NativeSessionCallback *obj = *((dtn::api::NativeSessionCallback **)&objarg);
  (void)jcls;
  SwigDirector_NativeSessionCallback *director = dynamic_cast<SwigDirector_NativeSessionCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSessionCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  dtn::api::NativeSessionCallback *obj = *((dtn::api::NativeSessionCallback **)&objarg);
  SwigDirector_NativeSessionCallback *director = dynamic_cast<SwigDirector_NativeSessionCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1REG1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::api::NativeSession::RegisterIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::api::NativeSession::RegisterIndex)dtn::api::NativeSession::REG1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1REG2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dtn::api::NativeSession::RegisterIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (dtn::api::NativeSession::RegisterIndex)dtn::api::NativeSession::REG2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_new_1NativeSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::api::NativeSessionCallback *arg1 = (dtn::api::NativeSessionCallback *) 0 ;
  dtn::api::NativeSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSessionCallback **)&jarg1; 
  result = (dtn::api::NativeSession *)new dtn::api::NativeSession(arg1);
  *(dtn::api::NativeSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_delete_1NativeSession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1getNodeEID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::data::EID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  result = (dtn::data::EID *) &((dtn::api::NativeSession const *)arg1)->getNodeEID();
  *(dtn::data::EID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1setEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->setEndpoint((std::string const &)*arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1resetEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  (arg1)->resetEndpoint();
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1addEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->addEndpoint((std::string const &)*arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1removeEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->removeEndpoint((std::string const &)*arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1addRegistration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::data::EID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::EID const & reference is null");
    return ;
  } 
  try {
    (arg1)->addRegistration((dtn::data::EID const &)*arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1removeRegistration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::data::EID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = *(dtn::data::EID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::EID const & reference is null");
    return ;
  } 
  try {
    (arg1)->removeRegistration((dtn::data::EID const &)*arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  try {
    (arg1)->next(arg2);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  dtn::data::BundleID *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  arg3 = *(dtn::data::BundleID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::BundleID const & reference is null");
    return ;
  } 
  try {
    (arg1)->load(arg2,(dtn::data::BundleID const &)*arg3);
  }
  catch(dtn::api::NativeSessionException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::NativeSessionException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  dtn::data::Bundle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  result = (dtn::data::Bundle *) &((dtn::api::NativeSession const *)arg1)->get(arg2);
  *(dtn::data::Bundle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  try {
    (arg1)->free(arg2);
  }
  catch(dtn::api::BundleNotFoundException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::BundleNotFoundException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1delivered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::data::BundleID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = *(dtn::data::BundleID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::BundleID const & reference is null");
    return ;
  } 
  try {
    (arg1)->delivered((dtn::data::BundleID const &)*arg2);
  }
  catch(dtn::api::BundleNotFoundException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ dtn::api::BundleNotFoundException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  (arg1)->send(arg2);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1put_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  dtn::data::Bundle *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  arg3 = *(dtn::data::Bundle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::Bundle const & reference is null");
    return ;
  } 
  (arg1)->put(arg2,(dtn::data::Bundle const &)*arg3);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1put_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  dtn::data::PrimaryBlock *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  arg3 = *(dtn::data::PrimaryBlock **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dtn::data::PrimaryBlock const & reference is null");
    return ;
  } 
  (arg1)->put(arg2,(dtn::data::PrimaryBlock const &)*arg3);
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3, jlong jarg5) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  {
    arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
    arg4 = (size_t) jenv->GetArrayLength(jarg3);
  }
  arg5 = (size_t)jarg5; 
  (arg1)->write(arg2,(char const *)arg3,arg4,arg5);
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  {
    arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
    arg4 = (size_t) jenv->GetArrayLength(jarg3);
  }
  (arg1)->write(arg2,(char const *)arg3,arg4);
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3, jintArray jarg4, jlong jarg5) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  char *arg3 = (char *) 0 ;
  size_t *arg4 = 0 ;
  size_t arg5 ;
  size_t temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  {
    arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0); 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp4 = (size_t)0;
    arg4 = &temp4; 
  }
  arg5 = (size_t)jarg5; 
  (arg1)->read(arg2,arg3,*arg4,arg5);
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0); 
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_NativeSession_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3, jintArray jarg4) {
  dtn::api::NativeSession *arg1 = (dtn::api::NativeSession *) 0 ;
  dtn::api::NativeSession::RegisterIndex arg2 ;
  char *arg3 = (char *) 0 ;
  size_t *arg4 = 0 ;
  size_t temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dtn::api::NativeSession **)&jarg1; 
  arg2 = (dtn::api::NativeSession::RegisterIndex)jarg2; 
  {
    arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0); 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp4 = (size_t)0;
    arg4 = &temp4; 
  }
  (arg1)->read(arg2,arg3,*arg4);
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0); 
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_StatusReportBlock_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dtn::data::AdministrativeBlock **)&baseptr = *(dtn::data::StatusReportBlock **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_CustodySignalBlock_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dtn::data::AdministrativeBlock **)&baseptr = *(dtn::data::CustodySignalBlock **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_de_tubs_ibr_dtn_swig_swigJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector_NativeSessionCallback_notifyBundle", "(Lde/tubs/ibr/dtn/swig/NativeSessionCallback;J)V" 
    },
    {
      "SwigDirector_NativeSessionCallback_notifyStatusReport", "(Lde/tubs/ibr/dtn/swig/NativeSessionCallback;J)V" 
    },
    {
      "SwigDirector_NativeSessionCallback_notifyCustodySignal", "(Lde/tubs/ibr/dtn/swig/NativeSessionCallback;J)V" 
    }
  };
  Swig::jclass_swigJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_swigJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

