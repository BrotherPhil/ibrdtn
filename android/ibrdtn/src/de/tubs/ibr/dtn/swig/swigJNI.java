/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.tubs.ibr.dtn.swig;

public class swigJNI {
  public final static native String EID_DEFAULT_SCHEME_get();
  public final static native String EID_CBHE_SCHEME_get();
  public final static native long new_EID__SWIG_0();
  public final static native long new_EID__SWIG_1(String jarg1, String jarg2);
  public final static native long new_EID__SWIG_2(String jarg1);
  public final static native long new_EID__SWIG_3(long jarg1, long jarg2);
  public final static native void delete_EID(long jarg1);
  public final static native boolean EID_sameHost__SWIG_0(long jarg1, EID jarg1_, String jarg2);
  public final static native boolean EID_sameHost__SWIG_1(long jarg1, EID jarg1_, long jarg2, EID jarg2_);
  public final static native String EID_getString(long jarg1, EID jarg1_);
  public final static native String EID_getApplication(long jarg1, EID jarg1_);
  public final static native String EID_getHost(long jarg1, EID jarg1_);
  public final static native String EID_getScheme(long jarg1, EID jarg1_);
  public final static native String EID_getSSP(long jarg1, EID jarg1_);
  public final static native String EID_getDelimiter(long jarg1, EID jarg1_);
  public final static native long EID_getNode(long jarg1, EID jarg1_);
  public final static native boolean EID_hasApplication(long jarg1, EID jarg1_);
  public final static native boolean EID_isCompressable(long jarg1, EID jarg1_);
  public final static native boolean EID_isNone(long jarg1, EID jarg1_);
  public final static native long EID_getCompressed(long jarg1, EID jarg1_);
  public final static native long new_BundleID__SWIG_0(long jarg1, EID jarg1_, long jarg2, long jarg3, boolean jarg4, long jarg5);
  public final static native long new_BundleID__SWIG_1(long jarg1, EID jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long new_BundleID__SWIG_2(long jarg1, EID jarg1_, long jarg2, long jarg3);
  public final static native long new_BundleID__SWIG_3(long jarg1, EID jarg1_, long jarg2);
  public final static native long new_BundleID__SWIG_4(long jarg1, EID jarg1_);
  public final static native long new_BundleID__SWIG_5();
  public final static native long new_BundleID__SWIG_6(long jarg1, Bundle jarg1_);
  public final static native void delete_BundleID(long jarg1);
  public final static native String BundleID_toString(long jarg1, BundleID jarg1_);
  public final static native long BundleID_getTimestamp(long jarg1, BundleID jarg1_);
  public final static native void BundleID_source_set(long jarg1, BundleID jarg1_, long jarg2, EID jarg2_);
  public final static native long BundleID_source_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_timestamp_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_timestamp_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_sequencenumber_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_sequencenumber_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_fragment_set(long jarg1, BundleID jarg1_, boolean jarg2);
  public final static native boolean BundleID_fragment_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_offset_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_offset_get(long jarg1, BundleID jarg1_);
  public final static native long new_Bundle();
  public final static native void delete_Bundle(long jarg1);
  public final static native long Bundle_getBlocks(long jarg1, Bundle jarg1_);
  public final static native long Bundle_getBlock__SWIG_0(long jarg1, Bundle jarg1_, int jarg2);
  public final static native long Bundle_push_front__SWIG_1(long jarg1, Bundle jarg1_, long jarg2);
  public final static native long Bundle_push_back__SWIG_1(long jarg1, Bundle jarg1_, long jarg2);
  public final static native long Bundle_insert__SWIG_1(long jarg1, Bundle jarg1_, long jarg2, long jarg3);
  public final static native long Bundle_push_front__SWIG_2(long jarg1, Bundle jarg1_, long jarg2);
  public final static native long Bundle_push_back__SWIG_2(long jarg1, Bundle jarg1_, long jarg2);
  public final static native long Bundle_insert__SWIG_2(long jarg1, Bundle jarg1_, long jarg2, long jarg3);
  public final static native void Bundle_remove(long jarg1, Bundle jarg1_, long jarg2);
  public final static native void Bundle_clearBlocks(long jarg1, Bundle jarg1_);
  public final static native String Bundle_toString(long jarg1, Bundle jarg1_);
  public final static native long Bundle_blockCount(long jarg1, Bundle jarg1_);
  public final static native boolean Bundle_allEIDsInCBHE(long jarg1, Bundle jarg1_);
  public final static native int CustodySignalBlock_NO_ADDITIONAL_INFORMATION_get();
  public final static native int CustodySignalBlock_RESERVED_01_get();
  public final static native int CustodySignalBlock_RESERVED_02_get();
  public final static native int CustodySignalBlock_REDUNDANT_RECEPTION_get();
  public final static native int CustodySignalBlock_DEPLETED_STORAGE_get();
  public final static native int CustodySignalBlock_DESTINATION_ENDPOINT_ID_UNINTELLIGIBLE_get();
  public final static native int CustodySignalBlock_NO_KNOWN_ROUTE_TO_DESTINATION_FROM_HERE_get();
  public final static native int CustodySignalBlock_NO_TIMELY_CONTACT_WITH_NEXT_NODE_ON_ROUTE_get();
  public final static native int CustodySignalBlock_BLOCK_UNINTELLIGIBLE_get();
  public final static native long new_CustodySignalBlock();
  public final static native void delete_CustodySignalBlock(long jarg1);
  public final static native void CustodySignalBlock_setMatch__SWIG_0(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock_setMatch__SWIG_1(long jarg1, CustodySignalBlock jarg1_, long jarg2, Bundle jarg2_);
  public final static native boolean CustodySignalBlock_match(long jarg1, CustodySignalBlock jarg1_, long jarg2, Bundle jarg2_);
  public final static native void CustodySignalBlock_read(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock_write(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock__custody_accepted_set(long jarg1, CustodySignalBlock jarg1_, boolean jarg2);
  public final static native boolean CustodySignalBlock__custody_accepted_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__reason_set(long jarg1, CustodySignalBlock jarg1_, int jarg2);
  public final static native int CustodySignalBlock__reason_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__fragment_offset_set(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native long CustodySignalBlock__fragment_offset_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__fragment_length_set(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native long CustodySignalBlock__fragment_length_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__timeofsignal_set(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native long CustodySignalBlock__timeofsignal_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__bundle_timestamp_set(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native long CustodySignalBlock__bundle_timestamp_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__bundle_sequence_set(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native long CustodySignalBlock__bundle_sequence_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__source_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long CustodySignalBlock__source_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native long new_NativeSessionException__SWIG_0(String jarg1);
  public final static native long new_NativeSessionException__SWIG_1();
  public final static native void delete_NativeSessionException(long jarg1);
  public final static native long new_BundleNotFoundException__SWIG_0(String jarg1);
  public final static native long new_BundleNotFoundException__SWIG_1();
  public final static native void delete_BundleNotFoundException(long jarg1);
  public final static native void delete_NativeSessionCallback(long jarg1);
  public final static native void NativeSessionCallback_notifyBundle(long jarg1, NativeSessionCallback jarg1_, long jarg2, BundleID jarg2_);
  public final static native void NativeSessionCallback_notifyStatusReport(long jarg1, NativeSessionCallback jarg1_, long jarg2);
  public final static native void NativeSessionCallback_notifyCustodySignal(long jarg1, NativeSessionCallback jarg1_, long jarg2, CustodySignalBlock jarg2_);
  public final static native long new_NativeSessionCallback();
  public final static native void NativeSessionCallback_director_connect(NativeSessionCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NativeSessionCallback_change_ownership(NativeSessionCallback obj, long cptr, boolean take_or_release);
  public final static native int NativeSession_REG1_get();
  public final static native int NativeSession_REG2_get();
  public final static native long new_NativeSession(long jarg1, NativeSessionCallback jarg1_);
  public final static native void delete_NativeSession(long jarg1);
  public final static native long NativeSession_getNodeEID(long jarg1, NativeSession jarg1_);
  public final static native void NativeSession_setEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_resetEndpoint(long jarg1, NativeSession jarg1_);
  public final static native void NativeSession_addEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_removeEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_addRegistration(long jarg1, NativeSession jarg1_, long jarg2, EID jarg2_);
  public final static native void NativeSession_removeRegistration(long jarg1, NativeSession jarg1_, long jarg2, EID jarg2_);
  public final static native void NativeSession_next(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_load(long jarg1, NativeSession jarg1_, int jarg2, long jarg3, BundleID jarg3_);
  public final static native long NativeSession_get(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_free(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_clear(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_delivered(long jarg1, NativeSession jarg1_, long jarg2, BundleID jarg2_);
  public final static native void NativeSession_send(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_put(long jarg1, NativeSession jarg1_, int jarg2, long jarg3, Bundle jarg3_);
  public final static native void NativeSession_write__SWIG_0(long jarg1, NativeSession jarg1_, int jarg2, String jarg3, long jarg4, long jarg5);
  public final static native void NativeSession_write__SWIG_1(long jarg1, NativeSession jarg1_, int jarg2, String jarg3, long jarg4);
  public final static native void NativeSession_read__SWIG_0(long jarg1, NativeSession jarg1_, int jarg2, String jarg3, long jarg4, long jarg5);
  public final static native void NativeSession_read__SWIG_1(long jarg1, NativeSession jarg1_, int jarg2, String jarg3, long jarg4);

  public static void SwigDirector_NativeSessionCallback_notifyBundle(NativeSessionCallback self, long id) {
    self.notifyBundle(new BundleID(id, false));
  }
  public static void SwigDirector_NativeSessionCallback_notifyStatusReport(NativeSessionCallback self, long report) {
    self.notifyStatusReport(new SWIGTYPE_p_dtn__data__StatusReportBlock(report, false));
  }
  public static void SwigDirector_NativeSessionCallback_notifyCustodySignal(NativeSessionCallback self, long custody) {
    self.notifyCustodySignal(new CustodySignalBlock(custody, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
