/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.tubs.ibr.dtn.swig;

public class swigJNI {
  public final static native String EID_DEFAULT_SCHEME_get();
  public final static native String EID_CBHE_SCHEME_get();
  public final static native long new_EID__SWIG_0();
  public final static native long new_EID__SWIG_1(String jarg1, String jarg2);
  public final static native long new_EID__SWIG_2(String jarg1);
  public final static native long new_EID__SWIG_3(long jarg1, long jarg2);
  public final static native void delete_EID(long jarg1);
  public final static native boolean EID_sameHost__SWIG_0(long jarg1, EID jarg1_, String jarg2);
  public final static native boolean EID_sameHost__SWIG_1(long jarg1, EID jarg1_, long jarg2, EID jarg2_);
  public final static native String EID_getString(long jarg1, EID jarg1_);
  public final static native String EID_getApplication(long jarg1, EID jarg1_);
  public final static native String EID_getHost(long jarg1, EID jarg1_);
  public final static native String EID_getScheme(long jarg1, EID jarg1_);
  public final static native String EID_getSSP(long jarg1, EID jarg1_);
  public final static native String EID_getDelimiter(long jarg1, EID jarg1_);
  public final static native long EID_getNode(long jarg1, EID jarg1_);
  public final static native boolean EID_hasApplication(long jarg1, EID jarg1_);
  public final static native boolean EID_isCompressable(long jarg1, EID jarg1_);
  public final static native boolean EID_isNone(long jarg1, EID jarg1_);
  public final static native long EID_getCompressed(long jarg1, EID jarg1_);
  public final static native short BUNDLE_VERSION_get();
  public final static native int PrimaryBlock_PRIO_LOW_get();
  public final static native int PrimaryBlock_PRIO_MEDIUM_get();
  public final static native int PrimaryBlock_PRIO_HIGH_get();
  public final static native int PrimaryBlock_FRAGMENT_get();
  public final static native int PrimaryBlock_APPDATA_IS_ADMRECORD_get();
  public final static native int PrimaryBlock_DONT_FRAGMENT_get();
  public final static native int PrimaryBlock_CUSTODY_REQUESTED_get();
  public final static native int PrimaryBlock_DESTINATION_IS_SINGLETON_get();
  public final static native int PrimaryBlock_ACKOFAPP_REQUESTED_get();
  public final static native int PrimaryBlock_RESERVED_6_get();
  public final static native int PrimaryBlock_PRIORITY_BIT1_get();
  public final static native int PrimaryBlock_PRIORITY_BIT2_get();
  public final static native int PrimaryBlock_CLASSOFSERVICE_9_get();
  public final static native int PrimaryBlock_CLASSOFSERVICE_10_get();
  public final static native int PrimaryBlock_CLASSOFSERVICE_11_get();
  public final static native int PrimaryBlock_CLASSOFSERVICE_12_get();
  public final static native int PrimaryBlock_CLASSOFSERVICE_13_get();
  public final static native int PrimaryBlock_REQUEST_REPORT_OF_BUNDLE_RECEPTION_get();
  public final static native int PrimaryBlock_REQUEST_REPORT_OF_CUSTODY_ACCEPTANCE_get();
  public final static native int PrimaryBlock_REQUEST_REPORT_OF_BUNDLE_FORWARDING_get();
  public final static native int PrimaryBlock_REQUEST_REPORT_OF_BUNDLE_DELIVERY_get();
  public final static native int PrimaryBlock_REQUEST_REPORT_OF_BUNDLE_DELETION_get();
  public final static native int PrimaryBlock_STATUS_REPORT_REQUEST_19_get();
  public final static native int PrimaryBlock_STATUS_REPORT_REQUEST_20_get();
  public final static native int PrimaryBlock_DTNSEC_REQUEST_SIGN_get();
  public final static native int PrimaryBlock_DTNSEC_REQUEST_ENCRYPT_get();
  public final static native int PrimaryBlock_DTNSEC_STATUS_VERIFIED_get();
  public final static native int PrimaryBlock_DTNSEC_STATUS_CONFIDENTIAL_get();
  public final static native int PrimaryBlock_DTNSEC_STATUS_AUTHENTICATED_get();
  public final static native int PrimaryBlock_IBRDTN_REQUEST_COMPRESSION_get();
  public final static native long new_PrimaryBlock();
  public final static native void delete_PrimaryBlock(long jarg1);
  public final static native boolean PrimaryBlock_isExpired(long jarg1, PrimaryBlock jarg1_);
  public final static native String PrimaryBlock_toString(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock_set(long jarg1, PrimaryBlock jarg1_, int jarg2, boolean jarg3);
  public final static native boolean PrimaryBlock_get(long jarg1, PrimaryBlock jarg1_, int jarg2);
  public final static native int PrimaryBlock_getPriority(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock_setPriority(long jarg1, PrimaryBlock jarg1_, int jarg2);
  public final static native void PrimaryBlock_relabel(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__procflags_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__procflags_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__timestamp_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__timestamp_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__sequencenumber_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__sequencenumber_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__lifetime_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__lifetime_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__fragmentoffset_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__fragmentoffset_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__appdatalength_set(long jarg1, PrimaryBlock jarg1_, long jarg2);
  public final static native long PrimaryBlock__appdatalength_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__source_set(long jarg1, PrimaryBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long PrimaryBlock__source_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__destination_set(long jarg1, PrimaryBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long PrimaryBlock__destination_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__reportto_set(long jarg1, PrimaryBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long PrimaryBlock__reportto_get(long jarg1, PrimaryBlock jarg1_);
  public final static native void PrimaryBlock__custodian_set(long jarg1, PrimaryBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long PrimaryBlock__custodian_get(long jarg1, PrimaryBlock jarg1_);
  public final static native long SDNV_MAX_LENGTH_get();
  public final static native long new_SDNV__SWIG_0(long jarg1);
  public final static native long new_SDNV__SWIG_1();
  public final static native void delete_SDNV(long jarg1);
  public final static native long SDNV_getLength__SWIG_0(long jarg1, SDNV jarg1_);
  public final static native long SDNV_getLength__SWIG_1(long jarg1);
  public final static native long SDNV_getLength__SWIG_2(long jarg1);
  public final static native long SDNV_getValue(long jarg1, SDNV jarg1_);
  public final static native long SDNV_decode(long jarg1, SDNV jarg1_, String jarg2, long jarg3);
  public final static native long SDNV_encode(long jarg1, SDNV jarg1_, String jarg2, long jarg3);
  public final static native long new_DTNTime__SWIG_0();
  public final static native long new_DTNTime__SWIG_1(long jarg1, long jarg2);
  public final static native long new_DTNTime__SWIG_2(long jarg1);
  public final static native long new_DTNTime__SWIG_3(long jarg1, SDNV jarg1_, long jarg2, SDNV jarg2_);
  public final static native void delete_DTNTime(long jarg1);
  public final static native long DTNTime_getTimestamp(long jarg1, DTNTime jarg1_);
  public final static native long DTNTime_getNanoseconds(long jarg1, DTNTime jarg1_);
  public final static native void DTNTime_set(long jarg1, DTNTime jarg1_);
  public final static native long DTNTime_getLength(long jarg1, DTNTime jarg1_);
  public final static native long new_BundleID__SWIG_0(long jarg1, EID jarg1_, long jarg2, long jarg3, boolean jarg4, long jarg5);
  public final static native long new_BundleID__SWIG_1(long jarg1, EID jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long new_BundleID__SWIG_2(long jarg1, EID jarg1_, long jarg2, long jarg3);
  public final static native long new_BundleID__SWIG_3(long jarg1, EID jarg1_, long jarg2);
  public final static native long new_BundleID__SWIG_4(long jarg1, EID jarg1_);
  public final static native long new_BundleID__SWIG_5();
  public final static native long new_BundleID__SWIG_6(long jarg1);
  public final static native void delete_BundleID(long jarg1);
  public final static native String BundleID_toString(long jarg1, BundleID jarg1_);
  public final static native void BundleID_source_set(long jarg1, BundleID jarg1_, long jarg2, EID jarg2_);
  public final static native long BundleID_source_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_timestamp_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_timestamp_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_sequencenumber_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_sequencenumber_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_fragment_set(long jarg1, BundleID jarg1_, boolean jarg2);
  public final static native boolean BundleID_fragment_get(long jarg1, BundleID jarg1_);
  public final static native void BundleID_offset_set(long jarg1, BundleID jarg1_, long jarg2);
  public final static native long BundleID_offset_get(long jarg1, BundleID jarg1_);
  public final static native void delete_AdministrativeBlock(long jarg1);
  public final static native boolean AdministrativeBlock_refsFragment(long jarg1, AdministrativeBlock jarg1_);
  public final static native void AdministrativeBlock_read(long jarg1, AdministrativeBlock jarg1_, long jarg2);
  public final static native void AdministrativeBlock_write(long jarg1, AdministrativeBlock jarg1_, long jarg2);
  public final static native void AdministrativeBlock__admfield_set(long jarg1, AdministrativeBlock jarg1_, char jarg2);
  public final static native char AdministrativeBlock__admfield_get(long jarg1, AdministrativeBlock jarg1_);
  public final static native int StatusReportBlock_RECEIPT_OF_BUNDLE_get();
  public final static native int StatusReportBlock_CUSTODY_ACCEPTANCE_OF_BUNDLE_get();
  public final static native int StatusReportBlock_FORWARDING_OF_BUNDLE_get();
  public final static native int StatusReportBlock_DELIVERY_OF_BUNDLE_get();
  public final static native int StatusReportBlock_DELETION_OF_BUNDLE_get();
  public final static native int StatusReportBlock_NO_ADDITIONAL_INFORMATION_get();
  public final static native int StatusReportBlock_LIFETIME_EXPIRED_get();
  public final static native int StatusReportBlock_FORWARDED_OVER_UNIDIRECTIONAL_LINK_get();
  public final static native int StatusReportBlock_TRANSMISSION_CANCELED_get();
  public final static native int StatusReportBlock_DEPLETED_STORAGE_get();
  public final static native int StatusReportBlock_DESTINATION_ENDPOINT_ID_UNINTELLIGIBLE_get();
  public final static native int StatusReportBlock_NO_KNOWN_ROUTE_TO_DESTINATION_FROM_HERE_get();
  public final static native int StatusReportBlock_NO_TIMELY_CONTACT_WITH_NEXT_NODE_ON_ROUTE_get();
  public final static native int StatusReportBlock_BLOCK_UNINTELLIGIBLE_get();
  public final static native long new_StatusReportBlock();
  public final static native void delete_StatusReportBlock(long jarg1);
  public final static native void StatusReportBlock_read(long jarg1, StatusReportBlock jarg1_, long jarg2);
  public final static native void StatusReportBlock_write(long jarg1, StatusReportBlock jarg1_, long jarg2);
  public final static native void StatusReportBlock__status_set(long jarg1, StatusReportBlock jarg1_, char jarg2);
  public final static native char StatusReportBlock__status_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__reasoncode_set(long jarg1, StatusReportBlock jarg1_, char jarg2);
  public final static native char StatusReportBlock__reasoncode_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__fragment_offset_set(long jarg1, StatusReportBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long StatusReportBlock__fragment_offset_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__fragment_length_set(long jarg1, StatusReportBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long StatusReportBlock__fragment_length_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__timeof_receipt_set(long jarg1, StatusReportBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long StatusReportBlock__timeof_receipt_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__timeof_custodyaccept_set(long jarg1, StatusReportBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long StatusReportBlock__timeof_custodyaccept_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__timeof_forwarding_set(long jarg1, StatusReportBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long StatusReportBlock__timeof_forwarding_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__timeof_delivery_set(long jarg1, StatusReportBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long StatusReportBlock__timeof_delivery_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__timeof_deletion_set(long jarg1, StatusReportBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long StatusReportBlock__timeof_deletion_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__bundle_timestamp_set(long jarg1, StatusReportBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long StatusReportBlock__bundle_timestamp_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__bundle_sequence_set(long jarg1, StatusReportBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long StatusReportBlock__bundle_sequence_get(long jarg1, StatusReportBlock jarg1_);
  public final static native void StatusReportBlock__source_set(long jarg1, StatusReportBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long StatusReportBlock__source_get(long jarg1, StatusReportBlock jarg1_);
  public final static native int CustodySignalBlock_NO_ADDITIONAL_INFORMATION_get();
  public final static native int CustodySignalBlock_RESERVED_01_get();
  public final static native int CustodySignalBlock_RESERVED_02_get();
  public final static native int CustodySignalBlock_REDUNDANT_RECEPTION_get();
  public final static native int CustodySignalBlock_DEPLETED_STORAGE_get();
  public final static native int CustodySignalBlock_DESTINATION_ENDPOINT_ID_UNINTELLIGIBLE_get();
  public final static native int CustodySignalBlock_NO_KNOWN_ROUTE_TO_DESTINATION_FROM_HERE_get();
  public final static native int CustodySignalBlock_NO_TIMELY_CONTACT_WITH_NEXT_NODE_ON_ROUTE_get();
  public final static native int CustodySignalBlock_BLOCK_UNINTELLIGIBLE_get();
  public final static native long new_CustodySignalBlock();
  public final static native void delete_CustodySignalBlock(long jarg1);
  public final static native void CustodySignalBlock_setMatch__SWIG_0(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock_setMatch__SWIG_1(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native boolean CustodySignalBlock_match(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock_read(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock_write(long jarg1, CustodySignalBlock jarg1_, long jarg2);
  public final static native void CustodySignalBlock__custody_accepted_set(long jarg1, CustodySignalBlock jarg1_, boolean jarg2);
  public final static native boolean CustodySignalBlock__custody_accepted_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__reason_set(long jarg1, CustodySignalBlock jarg1_, int jarg2);
  public final static native int CustodySignalBlock__reason_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__fragment_offset_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long CustodySignalBlock__fragment_offset_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__fragment_length_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long CustodySignalBlock__fragment_length_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__timeofsignal_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, DTNTime jarg2_);
  public final static native long CustodySignalBlock__timeofsignal_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__bundle_timestamp_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long CustodySignalBlock__bundle_timestamp_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__bundle_sequence_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, SDNV jarg2_);
  public final static native long CustodySignalBlock__bundle_sequence_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native void CustodySignalBlock__source_set(long jarg1, CustodySignalBlock jarg1_, long jarg2, EID jarg2_);
  public final static native long CustodySignalBlock__source_get(long jarg1, CustodySignalBlock jarg1_);
  public final static native long new_NativeSessionException__SWIG_0(String jarg1);
  public final static native long new_NativeSessionException__SWIG_1();
  public final static native void delete_NativeSessionException(long jarg1);
  public final static native long new_BundleNotFoundException__SWIG_0(String jarg1);
  public final static native long new_BundleNotFoundException__SWIG_1();
  public final static native void delete_BundleNotFoundException(long jarg1);
  public final static native void delete_NativeSessionCallback(long jarg1);
  public final static native void NativeSessionCallback_notifyBundle(long jarg1, NativeSessionCallback jarg1_, long jarg2, BundleID jarg2_);
  public final static native void NativeSessionCallback_notifyStatusReport(long jarg1, NativeSessionCallback jarg1_, long jarg2, StatusReportBlock jarg2_);
  public final static native void NativeSessionCallback_notifyCustodySignal(long jarg1, NativeSessionCallback jarg1_, long jarg2, CustodySignalBlock jarg2_);
  public final static native long new_NativeSessionCallback();
  public final static native void NativeSessionCallback_director_connect(NativeSessionCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NativeSessionCallback_change_ownership(NativeSessionCallback obj, long cptr, boolean take_or_release);
  public final static native int NativeSession_REG1_get();
  public final static native int NativeSession_REG2_get();
  public final static native long new_NativeSession(long jarg1, NativeSessionCallback jarg1_);
  public final static native void delete_NativeSession(long jarg1);
  public final static native long NativeSession_getNodeEID(long jarg1, NativeSession jarg1_);
  public final static native void NativeSession_setEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_resetEndpoint(long jarg1, NativeSession jarg1_);
  public final static native void NativeSession_addEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_removeEndpoint(long jarg1, NativeSession jarg1_, String jarg2);
  public final static native void NativeSession_addRegistration(long jarg1, NativeSession jarg1_, long jarg2, EID jarg2_);
  public final static native void NativeSession_removeRegistration(long jarg1, NativeSession jarg1_, long jarg2, EID jarg2_);
  public final static native void NativeSession_next(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_load(long jarg1, NativeSession jarg1_, int jarg2, long jarg3, BundleID jarg3_);
  public final static native long NativeSession_get(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_free(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_clear(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_delivered(long jarg1, NativeSession jarg1_, long jarg2, BundleID jarg2_);
  public final static native void NativeSession_send(long jarg1, NativeSession jarg1_, int jarg2);
  public final static native void NativeSession_put__SWIG_0(long jarg1, NativeSession jarg1_, int jarg2, long jarg3);
  public final static native void NativeSession_put__SWIG_1(long jarg1, NativeSession jarg1_, int jarg2, long jarg3, PrimaryBlock jarg3_);
  public final static native void NativeSession_write__SWIG_0(long jarg1, NativeSession jarg1_, int jarg2, byte[] jarg3, long jarg5);
  public final static native void NativeSession_write__SWIG_1(long jarg1, NativeSession jarg1_, int jarg2, byte[] jarg3);
  public final static native void NativeSession_read__SWIG_0(long jarg1, NativeSession jarg1_, int jarg2, byte[] jarg3, int[] jarg4, long jarg5);
  public final static native void NativeSession_read__SWIG_1(long jarg1, NativeSession jarg1_, int jarg2, byte[] jarg3, int[] jarg4);
  public final static native long StatusReportBlock_SWIGUpcast(long jarg1);
  public final static native long CustodySignalBlock_SWIGUpcast(long jarg1);

  public static void SwigDirector_NativeSessionCallback_notifyBundle(NativeSessionCallback self, long id) {
    self.notifyBundle(new BundleID(id, false));
  }
  public static void SwigDirector_NativeSessionCallback_notifyStatusReport(NativeSessionCallback self, long report) {
    self.notifyStatusReport(new StatusReportBlock(report, false));
  }
  public static void SwigDirector_NativeSessionCallback_notifyCustodySignal(NativeSessionCallback self, long custody) {
    self.notifyCustodySignal(new CustodySignalBlock(custody, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
