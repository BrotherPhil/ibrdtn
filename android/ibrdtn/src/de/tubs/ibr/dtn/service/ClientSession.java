/*
 * ClientSession.java
 * 
 * Copyright (C) 2011-2013 IBR, TU Braunschweig
 *
 * Written-by: Johannes Morgenroth <morgenroth@ibr.cs.tu-bs.de>
 *             Dominik Sch√ºrmann <dominik@dominikschuermann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package de.tubs.ibr.dtn.service;

import java.io.FileInputStream;
import java.io.IOException;

import android.content.Context;
import android.content.Intent;
import android.os.ParcelFileDescriptor;
import android.os.RemoteException;
import android.util.Log;
import de.tubs.ibr.dtn.api.Block;
import de.tubs.ibr.dtn.api.Bundle;
import de.tubs.ibr.dtn.api.BundleID;
import de.tubs.ibr.dtn.api.DTNSession;
import de.tubs.ibr.dtn.api.DTNSessionCallback;
import de.tubs.ibr.dtn.api.GroupEndpoint;
import de.tubs.ibr.dtn.api.Registration;
import de.tubs.ibr.dtn.api.SingletonEndpoint;
import de.tubs.ibr.dtn.api.TransferMode;
import de.tubs.ibr.dtn.swig.NativeSerializerCallback;
import de.tubs.ibr.dtn.swig.NativeSession;
import de.tubs.ibr.dtn.swig.NativeSession.RegisterIndex;
import de.tubs.ibr.dtn.swig.NativeSessionCallback;
import de.tubs.ibr.dtn.swig.PrimaryBlock;

public class ClientSession {

	private final static String TAG = "ClientSession";

	private String _package_name = null;

	private Context context = null;
	private Registration _registration = null;

	/**
	 * Implemented C++ callback using SWIG directors
	 * 
	 * see http://stackoverflow.com/questions/8168517/generating-java-interface-
	 * with-swig/8246375#8246375
	 */
	private class NativeSessionCallbackImpl extends NativeSessionCallback {

		@Override
		public void notifyBundle(de.tubs.ibr.dtn.swig.BundleID swigId)
		{
			invoke_receive_intent(toAndroid(swigId));
		}

		@Override
		public void notifyStatusReport(de.tubs.ibr.dtn.swig.StatusReportBlock swigReport)
		{
			// TODO
		}

		@Override
		public void notifyCustodySignal(de.tubs.ibr.dtn.swig.CustodySignalBlock swigCustody)
		{
			// TODO
		}

	};

	/*
	 * This is the actual native implementation of this session. See
	 * daemon/src/api/NativeSession.cpp. Java parts are generated by SWIG
	 */
	private NativeSession nativeSession = new NativeSession(new NativeSessionCallbackImpl());

	public ClientSession(Context context, Registration reg, String packageName) {
		this.context = context;
		this._package_name = packageName;
		this._registration = reg;
	}

	public synchronized void initialize()
	{
		// _daemon_online = true;

		// Register application
		register(_registration);
	}

	public void register(Registration reg)
	{
		// set local endpoint
		nativeSession.setEndpoint(reg.getEndpoint());

		if (Log.isLoggable(TAG, Log.DEBUG)) Log.d(TAG, "endpoint registered: " + reg.getEndpoint());

		for (GroupEndpoint group : reg.getGroups()) {

			de.tubs.ibr.dtn.swig.EID swigEid = new de.tubs.ibr.dtn.swig.EID(group.toString());
			nativeSession.addRegistration(swigEid);
			
			if (Log.isLoggable(TAG, Log.DEBUG)) Log.d(TAG, "registration added: " + group.toString());

		}

		invoke_registration_intent();
	}
	
	private class SerializerCallback extends NativeSerializerCallback {
		
		private DTNSessionCallback _cb = null;
		private TransferMode _mode = TransferMode.PASSTHROUGH;
		
		public SerializerCallback(DTNSessionCallback cb) {
			this._cb = cb;
		}

		@Override
		public void beginBundle(PrimaryBlock block) {
			try {
				_cb.startBundle(toAndroid(block));
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		public void endBundle() {
			try {
				_cb.endBundle();
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		public void beginBlock(de.tubs.ibr.dtn.swig.Block block, long payload_length) {
			try {
				_mode = _cb.startBlock(toAndroid(block));
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		public void endBlock() {
			try {
				_cb.endBlock();
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		@Override
		public void payload(String data, long len) {
			try {
				switch (_mode) {
				case FILEDESCRIPTOR:
					break;
				case NULL:
					break;
				case PASSTHROUGH:
					// TODO: passthrough the data
					byte bytes[] = new byte[4];
					_cb.payload(bytes);
					break;
				case SIMPLE:
					break;
				default:
					break;
				
				}
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/**
	 * This is the actual implementation of the DTNSession API
	 */
	private final DTNSession.Stub mBinder = new DTNSession.Stub() {
		public boolean query(DTNSessionCallback cb, BundleID id) throws RemoteException
		{
			// load the bundle into the register
			nativeSession.load(NativeSession.RegisterIndex.REG1, toSwig(id));

			// get the bundle
			nativeSession.get(NativeSession.RegisterIndex.REG1, new SerializerCallback(cb));
			
			// TODO: catch exceptions?
			return true;
		}

		public boolean queryNext(DTNSessionCallback cb) throws RemoteException
		{
			// load the next bundle into the register
			nativeSession.next(NativeSession.RegisterIndex.REG1);
			
			// get the bundle
			nativeSession.get(NativeSession.RegisterIndex.REG1, new SerializerCallback(cb));
			
			// TODO: catch exceptions?
			return false;
		}

		public boolean delivered(BundleID id) throws RemoteException
		{
			nativeSession.delivered(toSwig(id));
			return true;
		}

		public boolean send(SingletonEndpoint destination, int lifetime, byte[] data) throws RemoteException
		{
			try {
				PrimaryBlock b = new PrimaryBlock();
				b.set(PrimaryBlock.FLAGS.DESTINATION_IS_SINGLETON, true);
				b.set_destination(new de.tubs.ibr.dtn.swig.EID(destination.toString()));
				b.set_lifetime(lifetime);

				// put the primary block into the register
				nativeSession.put(RegisterIndex.REG2, b);
				
				// add data
				nativeSession.write(RegisterIndex.REG2, data);
				
				// send the bundle
				nativeSession.send(RegisterIndex.REG2);

				// debug
				Log.i(TAG, "Message sent: " + data);

				return true;
			} catch (Exception e) {
				Log.e(TAG, "send failed", e);
				return false;
			}
		}

		public boolean sendGroup(GroupEndpoint destination, int lifetime, byte[] data) throws RemoteException
		{
			try {
				PrimaryBlock b = new PrimaryBlock();
				b.set(PrimaryBlock.FLAGS.DESTINATION_IS_SINGLETON, false);
				b.set_destination(new de.tubs.ibr.dtn.swig.EID(destination.toString()));
				b.set_lifetime(lifetime);

				// put the primary block into the register
				nativeSession.put(RegisterIndex.REG2, b);
				
				// add data
				nativeSession.write(RegisterIndex.REG2, data);
				
				// send the bundle
				nativeSession.send(RegisterIndex.REG2);

				// debug
				Log.i(TAG, "Message sent: " + data);

				return true;
			} catch (Exception e) {
				Log.e(TAG, "sendGroup failed", e);
				return false;
			}
		}

		public boolean sendFileDescriptor(SingletonEndpoint destination, int lifetime, ParcelFileDescriptor fd, long length) throws RemoteException
		{
			try {
				if (Log.isLoggable(TAG, Log.DEBUG)) Log.d(TAG, "Received file descriptor as bundle payload.");
				
				PrimaryBlock b = new PrimaryBlock();
				b.set(PrimaryBlock.FLAGS.DESTINATION_IS_SINGLETON, true);
				b.set_destination(new de.tubs.ibr.dtn.swig.EID(destination.toString()));
				b.set_lifetime(lifetime);

				// put the primary block into the register
				nativeSession.put(RegisterIndex.REG2, b);
				
				FileInputStream stream = new FileInputStream(fd.getFileDescriptor());
				try {
					int offset = 0;
					int count = 0;
					byte[] buffer = new byte[8192];
					while ((count = stream.read(buffer)) > 0) {
						// add data
						nativeSession.write(RegisterIndex.REG2, buffer, offset);
						offset += count;
					}
					
					// send the bundle
					nativeSession.send(RegisterIndex.REG2);
					
					return true;
				} finally {
					try {
						stream.close();
						fd.close();
					} catch (IOException e) {
					}
				}				
			} catch (Exception e) {
				Log.e(TAG, "sendFileDescriptor failed", e);
				return false;
			}
		}

		public boolean sendGroupFileDescriptor(GroupEndpoint destination, int lifetime, ParcelFileDescriptor fd, long length) throws RemoteException
		{
			try {
				if (Log.isLoggable(TAG, Log.DEBUG)) Log.d(TAG, "Received file descriptor as bundle payload.");
				
				PrimaryBlock b = new PrimaryBlock();
				b.set(PrimaryBlock.FLAGS.DESTINATION_IS_SINGLETON, false);
				b.set_destination(new de.tubs.ibr.dtn.swig.EID(destination.toString()));
				b.set_lifetime(lifetime);

				// put the primary block into the register
				nativeSession.put(RegisterIndex.REG2, b);
				
				FileInputStream stream = new FileInputStream(fd.getFileDescriptor());
				try {
					int offset = 0;
					int count = 0;
					byte[] buffer = new byte[8192];
					while ((count = stream.read(buffer)) > 0) {
						// add data
						nativeSession.write(RegisterIndex.REG2, buffer, offset);
						offset += count;
					}
					
					// send the bundle
					nativeSession.send(RegisterIndex.REG2);
					
					return true;
				} finally {
					try {
						stream.close();
						fd.close();
					} catch (IOException e) {
					}
				}
			} catch (Exception e) {
				Log.e(TAG, "sendGroupFileDescriptor failed", e);
				return false;
			}
		}
	};

	public DTNSession getBinder()
	{
		return mBinder;
	}

	public String getPackageName()
	{
		return _package_name;
	}

	public void invoke_receive_intent(BundleID id)
	{
		// forward the notification as intent
		// create a new intent
		Intent notify = new Intent(de.tubs.ibr.dtn.Intent.RECEIVE);
		notify.addCategory(_package_name);
		notify.putExtra("type", "bundle");
		notify.putExtra("data", id);

		// send notification intent
		context.sendBroadcast(notify);

		Log.d(TAG, "RECEIVE intent sent to " + _package_name);
	}

	private void invoke_registration_intent()
	{
		// send out registration intent to the application
		Intent broadcastIntent = new Intent(de.tubs.ibr.dtn.Intent.REGISTRATION);
		broadcastIntent.addCategory(_package_name);
		broadcastIntent.putExtra("key", _package_name);

		// send notification intent
		context.sendBroadcast(broadcastIntent);

		Log.d(TAG, "REGISTRATION intent sent to " + _package_name);
	}
	
	private de.tubs.ibr.dtn.swig.BundleID toSwig(BundleID id)
	{
		de.tubs.ibr.dtn.swig.BundleID swigId = new de.tubs.ibr.dtn.swig.BundleID();
		swigId.setSource(new de.tubs.ibr.dtn.swig.EID(id.getSource()));
		swigId.setSequencenumber(id.getSequencenumber());

		Timestamp ts = new Timestamp(id.getTimestamp());
		swigId.setTimestamp(ts.getValue());
		
		return swigId;
	}
	
	private de.tubs.ibr.dtn.swig.PrimaryBlock toSwig(Bundle bundle) {
		/*
		 * Convert API Bundle to SWIG bundle
		 */
		de.tubs.ibr.dtn.swig.PrimaryBlock ret = new de.tubs.ibr.dtn.swig.PrimaryBlock();
		ret.set_custodian(new de.tubs.ibr.dtn.swig.EID(bundle.custodian));
		ret.set_destination(new de.tubs.ibr.dtn.swig.EID(bundle.destination));
		ret.set_fragmentoffset(bundle.fragment_offset);
		ret.set_lifetime(bundle.lifetime);
		ret.set_procflags(bundle.procflags);
		ret.set_reportto(new de.tubs.ibr.dtn.swig.EID(bundle.reportto));
		ret.set_sequencenumber(bundle.sequencenumber);
		ret.set_source(new de.tubs.ibr.dtn.swig.EID(bundle.source));

		Timestamp ts = new Timestamp(bundle.timestamp);
		ret.set_timestamp(ts.getValue());
		
		return ret;
	}
	
	private Bundle toAndroid(PrimaryBlock block) {
		Bundle ret = new Bundle();

		ret.source = block.get_source().getString();
		ret.destination = block.get_destination().getString();
		ret.reportto = block.get_reportto().getString();
		ret.custodian = block.get_custodian().getString();
		
		ret.lifetime = block.get_lifetime();
		
		Timestamp ts = new Timestamp(block.get_timestamp());
		ret.timestamp = ts.getDate();
		
		ret.sequencenumber = block.get_sequencenumber();
		ret.procflags = block.get_procflags();
		if (block.get(PrimaryBlock.FLAGS.FRAGMENT)) {
			ret.app_data_length = block.get_appdatalength();
			ret.fragment_offset = block.get_fragmentoffset();
		}
		
		return ret;
	}
	
	private Block toAndroid(de.tubs.ibr.dtn.swig.Block block) {
		Block ret = new Block();
		ret.type = Integer.valueOf(block.getType());
		ret.length = block.getLength();
		ret.procflags = block.getProcessingFlags();
		return ret;
	}
	
	private BundleID toAndroid(de.tubs.ibr.dtn.swig.BundleID swigId) {
		// convert from swig BundleID to api BundleID
		BundleID id = new BundleID();
		id.setSequencenumber(swigId.getSequencenumber());
		id.setSource(swigId.getSource().getString());

		long swigTime = swigId.getTimestamp();
		Timestamp ts = new Timestamp(swigTime);
		id.setTimestamp(ts.getDate());
		
		return id;
	}
}
