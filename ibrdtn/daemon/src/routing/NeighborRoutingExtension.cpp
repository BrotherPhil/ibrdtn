/*
 * NeighborRoutingExtension.cpp
 *
 * Copyright (C) 2011 IBR, TU Braunschweig
 *
 * Written-by: Johannes Morgenroth <morgenroth@ibr.cs.tu-bs.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "config.h"
#include "routing/NeighborRoutingExtension.h"
#include "routing/QueueBundleEvent.h"
#include "core/BundleCore.h"
#include "core/TimeEvent.h"
#include "net/TransferCompletedEvent.h"
#include "net/TransferAbortedEvent.h"
#include "net/ConnectionEvent.h"
#include "core/NodeEvent.h"
#include "core/Node.h"
#include "net/ConnectionManager.h"
#include "ibrcommon/thread/MutexLock.h"
#include "storage/BundleStorage.h"
#include "core/BundleEvent.h"
#include <ibrcommon/Logger.h>

#ifdef HAVE_SQLITE
#include "storage/SQLiteBundleStorage.h"
#endif

#include <functional>
#include <list>
#include <algorithm>
#include <typeinfo>
#include <memory>

namespace dtn
{
	namespace routing
	{
		NeighborRoutingExtension::NeighborRoutingExtension(dtn::storage::BundleSeeker &seeker)
		 : Extension(seeker)
		{
		}

		NeighborRoutingExtension::~NeighborRoutingExtension()
		{
			join();
		}

		void NeighborRoutingExtension::__cancellation() throw ()
		{
			_taskqueue.abort();
		}

		void NeighborRoutingExtension::run() throw ()
		{
#ifdef HAVE_SQLITE
			class BundleFilter : public dtn::storage::BundleSelector, public dtn::storage::SQLiteDatabase::SQLBundleQuery
#else
			class BundleFilter : public dtn::storage::BundleSelector
#endif
			{
			public:
				BundleFilter(const NeighborDatabase::NeighborEntry &entry)
				 : _entry(entry)
				{};

				virtual ~BundleFilter() {};

				virtual size_t limit() const { return _entry.getFreeTransferSlots(); };

				virtual bool shouldAdd(const dtn::data::MetaBundle &meta) const throw (dtn::storage::BundleSelectorException)
				{
					// check Scope Control Block - do not forward bundles with hop limit == 0
					if (meta.hopcount == 0)
					{
						return false;
					}

					if (meta.get(dtn::data::PrimaryBlock::DESTINATION_IS_SINGLETON))
					{
						// do not forward local bundles
						if (meta.destination.getNode() == dtn::core::BundleCore::local)
						{
							return false;
						}

						// do not forward bundles for other nodes
						if (_entry.eid.getNode() != meta.destination.getNode())
						{
							return false;
						}
					}
					else
					{
						// do not forward non-singleton bundles
						return false;
					}

					// do not forward bundles already known by the destination
					if (_entry.has(meta))
					{
						return false;
					}

					return true;
				};

#ifdef HAVE_SQLITE
				const std::string getWhere() const
				{
					return "destination LIKE ?";
				};

				size_t bind(sqlite3_stmt *st, size_t offset) const
				{
					const std::string d = _entry.eid.getNode().getString() + "%";
					sqlite3_bind_text(st, offset, d.c_str(), d.size(), SQLITE_TRANSIENT);
					return offset + 1;
				}
#endif

			private:
				const NeighborDatabase::NeighborEntry &_entry;
			};

			dtn::storage::BundleResultList list;

			while (true)
			{
				NeighborDatabase &db = (**this).getNeighborDB();

				try {
					Task *t = _taskqueue.getnpop(true);
					std::auto_ptr<Task> killer(t);

					IBRCOMMON_LOGGER_DEBUG(5) << "processing neighbor routing task " << t->toString() << IBRCOMMON_LOGGER_ENDL;

					/**
					 * SearchNextBundleTask triggers a search for a bundle to transfer
					 * to another host. This Task is generated by TransferCompleted, TransferAborted
					 * and node events.
					 */
					try {
						SearchNextBundleTask &task = dynamic_cast<SearchNextBundleTask&>(*t);

						// this destination is not handles by any static route
						ibrcommon::MutexLock l(db);
						NeighborDatabase::NeighborEntry &entry = db.get(task.eid);

						// check if enough transfer slots available (threadhold reached)
						if (!entry.isTransferThresholdReached())
							throw NeighborDatabase::NoMoreTransfersAvailable();

						// create a new bundle filter
						BundleFilter filter(entry);

						// query an unknown bundle from the storage, the list contains max. 10 items.
						list.clear();
						_seeker.get(filter, list);

						IBRCOMMON_LOGGER_DEBUG(5) << "got " << list.size() << " items to transfer to " << task.eid.getString() << IBRCOMMON_LOGGER_ENDL;

						// send the bundles as long as we have resources
						for (std::list<dtn::data::MetaBundle>::const_iterator iter = list.begin(); iter != list.end(); iter++)
						{
							try {
								// transfer the bundle to the neighbor
								transferTo(entry, *iter);
							} catch (const NeighborDatabase::AlreadyInTransitException&) { };
						}
					} catch (const NeighborDatabase::NoMoreTransfersAvailable&) {
					} catch (const NeighborDatabase::NeighborNotAvailableException&) {
					} catch (const dtn::storage::NoBundleFoundException&) {
					} catch (const std::bad_cast&) { };

					/**
					 * process a received bundle
					 */
					try {
						dynamic_cast<ProcessBundleTask&>(*t);

						// new bundles trigger a recheck for all neighbors
						const std::set<dtn::core::Node> nl = dtn::core::BundleCore::getInstance().getConnectionManager().getNeighbors();

						for (std::set<dtn::core::Node>::const_iterator iter = nl.begin(); iter != nl.end(); iter++)
						{
							const dtn::core::Node &n = (*iter);

							// transfer the next bundle to this destination
							_taskqueue.push( new SearchNextBundleTask( n.getEID() ) );
						}
					} catch (const std::bad_cast&) { };

				} catch (const std::exception &ex) {
					IBRCOMMON_LOGGER_DEBUG(20) << "neighbor routing failed: " << ex.what() << IBRCOMMON_LOGGER_ENDL;
					return;
				}

				yield();
			}
		}

		void NeighborRoutingExtension::notify(const dtn::core::Event *evt) throw ()
		{
			try {
				const QueueBundleEvent &queued = dynamic_cast<const QueueBundleEvent&>(*evt);
				_taskqueue.push( new ProcessBundleTask(queued.bundle, queued.origin) );
				return;
			} catch (const std::bad_cast&) { };

			try {
				const dtn::net::TransferCompletedEvent &completed = dynamic_cast<const dtn::net::TransferCompletedEvent&>(*evt);
				// transfer the next bundle to this destination
				_taskqueue.push( new SearchNextBundleTask( completed.getPeer() ) );
				return;
			} catch (const std::bad_cast&) { };

			try {
				const dtn::net::TransferAbortedEvent &aborted = dynamic_cast<const dtn::net::TransferAbortedEvent&>(*evt);
				// transfer the next bundle to this destination
				_taskqueue.push( new SearchNextBundleTask( aborted.getPeer() ) );

				return;
			} catch (const std::bad_cast&) { };

			try {
				const dtn::core::NodeEvent &nodeevent = dynamic_cast<const dtn::core::NodeEvent&>(*evt);
				const dtn::core::Node &n = nodeevent.getNode();

				if (nodeevent.getAction() == NODE_AVAILABLE)
				{
					_taskqueue.push( new SearchNextBundleTask( n.getEID() ) );
				}

				return;
			} catch (const std::bad_cast&) { };

			try {
				const dtn::net::ConnectionEvent &ce = dynamic_cast<const dtn::net::ConnectionEvent&>(*evt);

				if (ce.state == dtn::net::ConnectionEvent::CONNECTION_UP)
				{
					// send all (multi-hop) bundles in the storage to the neighbor
					_taskqueue.push( new SearchNextBundleTask(ce.peer) );
				}
				return;
			} catch (const std::bad_cast&) { };
		}

		void NeighborRoutingExtension::componentUp() throw ()
		{
			try {
				// run the thread
				start();
			} catch (const ibrcommon::ThreadException &ex) {
				IBRCOMMON_LOGGER(error) << "failed to start routing component\n" << ex.what() << IBRCOMMON_LOGGER_ENDL;
			}
		}

		void NeighborRoutingExtension::componentDown() throw ()
		{
			try {
				// run the thread
				stop();
				join();
			} catch (const ibrcommon::ThreadException &ex) {
				IBRCOMMON_LOGGER(error) << "failed to stop routing component\n" << ex.what() << IBRCOMMON_LOGGER_ENDL;
			}
		}

		/****************************************/

		NeighborRoutingExtension::SearchNextBundleTask::SearchNextBundleTask(const dtn::data::EID &e)
		 : eid(e)
		{ }

		NeighborRoutingExtension::SearchNextBundleTask::~SearchNextBundleTask()
		{ }

		std::string NeighborRoutingExtension::SearchNextBundleTask::toString()
		{
			return "SearchNextBundleTask: " + eid.getString();
		}

		/****************************************/

		NeighborRoutingExtension::ProcessBundleTask::ProcessBundleTask(const dtn::data::MetaBundle &meta, const dtn::data::EID &o)
		 : bundle(meta), origin(o)
		{ }

		NeighborRoutingExtension::ProcessBundleTask::~ProcessBundleTask()
		{ }

		std::string NeighborRoutingExtension::ProcessBundleTask::toString()
		{
			return "ProcessBundleTask: " + bundle.toString();
		}
	}
}
